1.DOCKER INSTALL
JENKINS INSTALL
DOCKER HUB ACCOUNT CREATED.

2.Create a repository in docker hub:
   create a repository
   my-node-app as repo name 
   samll description about the repo 
   creating as public


3.Application Source Code:

// Example Node.js app (app.js)
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello from Dockerized App!');
});

app.listen(3000, () => {
  console.log('App running on port 3000');
});

4.Create a Dockerfile:
# Use official Node.js image from Docker Hub
FROM node:16

# Set the working directory inside the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to the working directory
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of your application code
COPY . .

# Expose the port your app runs on
EXPOSE 3000

# Start the app
CMD ["node", "app.js"]

5.//after this to create the package.json and packagelock.json (in command prompt)
npm init -y
npm install express

6. Doceker image building:
   docker login
   docker build -t <your-username>/<image-name>:<tag> .
   docker tag <local-image-name>:<tag> <your-username>/<image-name>:<tag> (optional) 
   docker images
   docker push <your-username>/<image-name>:<tag>

7. Jenkins pipeline:
    new item -> pipeline [give name > OK]
    pipeline section ->pipeline script from SCM -> Select Git -> git repository URL 
    Branch specifier -> main -> save 

8.Create a Jenkisfile in the github in the repo:
   add ,
       pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials-id')  // Replace with your Jenkins Docker Hub credentials ID
        IMAGE_NAME = '4vv22cs125/my-node-app'  // Replace with your Docker Hub repository name
        TAG = 'latest'  // Tag for the image
    }
    stages {
        stage('Clone Repository') {
            steps {
                checkout scm  // Checkout the code from your repository
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${IMAGE_NAME}:${TAG} .'  // Build the Docker image
            }
        }
        stage('Tag Docker Image') {
            steps {
                sh 'docker tag ${IMAGE_NAME}:${TAG} ${IMAGE_NAME}:${TAG}'  // Tag the image
            }
        }
        stage('Push to Docker Hub') {
            steps {
                withDockerRegistry([credentialsId: "${DOCKERHUB_CREDENTIALS}", url: 'https://index.docker.io/v1/']) {
                    sh 'docker push ${IMAGE_NAME}:${TAG}'  // Push the image to Docker Hub
                }
            }
        }
    }
}


9.Add dockerhub credential in jenkins:
   dashboard -> manage jenkins -> manage credentials
  global -> add credentials 
  enter dockerhub username -> dockerhub password -> ID eg.,dockerhub-credentials-id -> click OK

10.Open console and build run

11. Check the docker image in teh docker hub.
    























